stages:
  - obs

variables:
  BUILD_IMAGES_PROJECT: azure-li/azure-li-ci-containers
  TUMBLEWEED_BUILD: buildenv-tumbleweed

submit_azure_li_services_package:
  image: $CI_REGISTRY/$BUILD_IMAGES_PROJECT:$TUMBLEWEED_BUILD
  stage: obs
  only:
    - tags
  except:
    - schedules
    - branches
  script:
    - base64 --decode "$AZURE_LI_PACKAGE" > id_hop_host
    - chmod 600 id_hop_host
    - ssh -o StrictHostKeyChecking=no -i id_hop_host $(echo "$HOP_HOST" | base64 --decode) 2>/dev/null

update_obs_image_services:
  image: $CI_REGISTRY/$BUILD_IMAGES_PROJECT:$TUMBLEWEED_BUILD
  stage: obs
  only:
    - master
  except:
    - schedules
  script:
    - base64 --decode "$AZURE_LI_IMAGE_SERVICES" > id_hop_host
    - chmod 600 id_hop_host
    - ssh -o StrictHostKeyChecking=no -i id_hop_host $(echo "$HOP_HOST" | base64 --decode) 2>/dev/null

mirror_testing_images_to_microsoft:
  image: $CI_REGISTRY/$BUILD_IMAGES_PROJECT:$TUMBLEWEED_BUILD
  stage: obs
  only:
    refs:
      - schedules
    variables:
      - $SCHEDULE_TYPE == 'mirror'
  script:
    - base64 --decode "$AZURE_LI_MIRROR" > id_hop_host
    - chmod 600 id_hop_host
    - ssh -o StrictHostKeyChecking=no -i id_hop_host $(echo "$HOP_HOST_MIRROR" | base64 --decode) 2>/dev/null

mirror_production_images_to_microsoft:
  image: $CI_REGISTRY/$BUILD_IMAGES_PROJECT:$TUMBLEWEED_BUILD
  stage: obs
  only:
    refs:
      - schedules
    variables:
      - $SCHEDULE_TYPE == 'production_mirror'
  script:
    - base64 --decode "$AZURE_LI_PRODUCTION_MIRROR" > id_hop_host
    - chmod 600 id_hop_host
    - ssh -o StrictHostKeyChecking=no -i id_hop_host $(echo "$HOP_HOST_MIRROR" | base64 --decode) 2>/dev/null

create_obs_data_for_production:
  image: $CI_REGISTRY/$BUILD_IMAGES_PROJECT:$TUMBLEWEED_BUILD
  stage: obs
  only:
    - master
  except:
    - schedules
  script:
    - ./obs_static.sh
  artifacts:
    paths:
      - obs
